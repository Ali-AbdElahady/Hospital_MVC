// <auto-generated />
using System;
using Hospital.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital.DAL.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20240826133741_InitailCreate")]
    partial class InitailCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Hospital.DAL.Entites.Appointment", b =>
                {
                    b.Property<int>("Doctor_ID")
                        .HasColumnType("int");

                    b.Property<int>("Patient_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Doctor_ID", "Patient_ID");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Department_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hospital_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Hospital_ID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Department_ID")
                        .HasColumnType("int");

                    b.Property<string>("Doctor_FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_Phone_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_ِAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Department_ID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.HospitalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Hospital_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospital_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospital_Phone_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip_Code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Patient_ID")
                        .HasColumnType("int");

                    b.Property<string>("Service_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Patient_ID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Patient_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_Phone_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Pharmacy_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Pharmacy_ID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Pharmacy_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pharmacy_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pharmacy_Phone_Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pharmacys");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Medication_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Patient_ID")
                        .HasColumnType("int");

                    b.Property<decimal>("Prescription_Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Prescription_Date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Patient_ID");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Admission_Date")
                        .HasColumnType("date");

                    b.Property<int?>("Patient_ID")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Staff_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Patient_ID")
                        .IsUnique()
                        .HasFilter("[Patient_ID] IS NOT NULL");

                    b.HasIndex("Staff_ID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Department_ID")
                        .HasColumnType("int");

                    b.Property<string>("Staff_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Staff_FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Staff_LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Staff_Phone_Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Department_ID");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Appointment", b =>
                {
                    b.HasOne("Hospital.DAL.Entites.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.DAL.Entites.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Department", b =>
                {
                    b.HasOne("Hospital.DAL.Entites.HospitalEntity", "Hospital")
                        .WithMany("Departments")
                        .HasForeignKey("Hospital_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Doctor", b =>
                {
                    b.HasOne("Hospital.DAL.Entites.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("Department_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Invoice", b =>
                {
                    b.HasOne("Hospital.DAL.Entites.Patient", "Patient")
                        .WithMany("Invoices")
                        .HasForeignKey("Patient_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Patient", b =>
                {
                    b.HasOne("Hospital.DAL.Entites.Pharmacy", "Pharmacy")
                        .WithMany("Patients")
                        .HasForeignKey("Pharmacy_ID");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Prescription", b =>
                {
                    b.HasOne("Hospital.DAL.Entites.Patient", "Patient")
                        .WithMany("Prescription")
                        .HasForeignKey("Patient_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Room", b =>
                {
                    b.HasOne("Hospital.DAL.Entites.Patient", "Patient")
                        .WithOne("Room")
                        .HasForeignKey("Hospital.DAL.Entites.Room", "Patient_ID");

                    b.HasOne("Hospital.DAL.Entites.Staff", "Staff")
                        .WithMany("AssignedRooms")
                        .HasForeignKey("Staff_ID");

                    b.Navigation("Patient");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Staff", b =>
                {
                    b.HasOne("Hospital.DAL.Entites.Department", "Department")
                        .WithMany("Staffs")
                        .HasForeignKey("Department_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Department", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.HospitalEntity", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Invoices");

                    b.Navigation("Prescription");

                    b.Navigation("Room")
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Pharmacy", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Hospital.DAL.Entites.Staff", b =>
                {
                    b.Navigation("AssignedRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
