using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using System.Linq;
using System.Threading.Tasks;
using YourNamespace.Models; // Replace with your actual namespace
using System.Collections.Generic;
using Hospital.DAL.Entites;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using Hospital.PL.Areas.Admin.Models;
using Microsoft.CodeAnalysis.Options;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Newtonsoft.Json.Linq;
using System.Data;
using System.Net.NetworkInformation;
using System.Threading;
using System.Xml.Linq;
using System;

public class UserController : Controller
{
    private readonly UserManager<ApplicationUser> _userManager;
    private readonly RoleManager<IdentityRole> _roleManager;

    // Assuming you have services or a DbContext to fetch Hospitals and Departments
    private readonly ApplicationDbContext _context;

    public UserController(UserManager<ApplicationUser> userManager, RoleManager<IdentityRole> roleManager, ApplicationDbContext context)
    {
        _userManager = userManager;
        _roleManager = roleManager;
        _context = context;
    }

    // Action to get users by role, with optional filters for Hospital_Id and Department_Id
    public async Task<IActionResult> GetUsersByRole(string roleName, int? hospitalId, int? departmentId)
    {
        // Fetch all roles, hospitals, and departments for the dropdowns
        var roles = await _roleManager.Roles.ToListAsync();
        var hospitals = await _context.Hospitals.ToListAsync(); // Assuming you have a Hospital DbSet
        var departments = await _context.Departments.ToListAsync(); // Assuming you have a Department DbSet

        // Fetch users in the selected role
        var usersInRole = new List<ApplicationUser>();

        if (!string.IsNullOrEmpty(roleName))
        {
            if (!await _roleManager.RoleExistsAsync(roleName))
            {
                return NotFound($"Role '{roleName}' does not exist.");
            }

            usersInRole = await _userManager.GetUsersInRoleAsync(roleName);
        }

        // Apply filtering by Hospital_Id and Department_Id if provided
        if (hospitalId.HasValue)
        {
            usersInRole = usersInRole.Where(u => u.Hospital_Id == hospitalId.Value).ToList();
        }

        if (departmentId.HasValue)
        {
            usersInRole = usersInRole.Where(u => u.Department_Id == departmentId.Value).ToList();
        }

        // Optionally pass the filters to the view using ViewBag
        ViewBag.SelectedRole = roleName;
        ViewBag.SelectedHospital = hospitalId;
        ViewBag.SelectedDepartment = departmentId;

        // Pass data for dropdowns
        ViewBag.Roles = new SelectList(roles, "Name", "Name");
        ViewBag.Hospitals = new SelectList(hospitals, "Id", "Name"); // Replace with actual column names
        ViewBag.Departments = new SelectList(departments, "Id", "Name"); // Replace with actual column names

        return View(usersInRole); // Pass filtered users to the view
    }
}





@model IEnumerable<YourNamespace.Models.ApplicationUser>
@using Microsoft.AspNetCore.Mvc.Rendering

<h2> Users Filtered by Role, Hospital, and Department</h2>

<!-- Add a form for filtering -->
<form method = "get" action= "/User/GetUsersByRole" >


    < div class= "form-group" >
        < label for= "roleName" > Role </ label >
        < select class= "form-control" name = "roleName" id = "roleName" >
            < option value = "" > --Select Role-- </ option >
            @foreach(var role in (SelectList)ViewBag.Roles)
            {
                < option value = "@role.Value" @(role.Value == ViewBag.SelectedRole ? "selected" : "") > @role.Text </ option >
            }
        </ select >
    </ div >

    < div class= "form-group" >
        < label for= "hospitalId" > Hospital </ label >
        < select class= "form-control" name = "hospitalId" id = "hospitalId" >
            < option value = "" > --Select Hospital-- </ option >
            @foreach(var hospital in (SelectList)ViewBag.Hospitals)
            {
                < option value = "@hospital.Value" @(hospital.Value == ViewBag.SelectedHospital ? "selected" : "") > @hospital.Text </ option >
            }
        </ select >
    </ div >

    < div class= "form-group" >
        < label for= "departmentId" > Department </ label >
        < select class= "form-control" name = "departmentId" id = "departmentId" >
            < option value = "" > --Select Department-- </ option >
@foreach(var department in (SelectList)ViewBag.Departments)
            {
                < option value = "@department.Value" @(department.Value == ViewBag.SelectedDepartment ? "selected" : "") > @department.Text </ option >
            }
        </ select >
    </ div >


    < button type = "submit" class= "btn btn-primary" > Search </ button >
</ form >

< hr />

@if(!Model.Any())
{
    < p > No users found.</ p >
}
else
{
    < table class= "table table-bordered" >
        < thead >
            < tr >
                < th > Username </ th >
                < th > Email </ th >
                < th > Hospital </ th >
                < th > Department </ th >
                < th > Actions </ th >
            </ tr >
        </ thead >
        < tbody >
            @foreach(var user in Model)
            {
                < tr >
                    < td > @user.UserName </ td >
                    < td > @user.Email </ td >
                    < td > @user.Hospital_Id </ td >
                    < td > @user.Department_Id </ td >
                    < td >
                        < a href = "/User/Details/@user.Id" class= "btn btn-primary" > View Details </ a >
                    </ td >
                </ tr >
            }
        </ tbody >
    </ table >
}
